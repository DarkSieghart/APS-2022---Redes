package Chat;

import java.io.IOException;
import java.net.ServerSocket;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

public class Chat {

    public static final int PORT = 400;
    private ServerSocket serverSocket;
    private final List<ClienteSocket> cliente = new LinkedList<>();
    private ClienteSocket ClienteSocket;

    public void start () throws IOException {
        serverSocket = new ServerSocket(PORT);
        System.out.println("Chat iniciado na porta " + PORT);
        OnlyConnectionCliente();
    }

    private void OnlyConnectionCliente() throws IOException {
            while (true){
                ClienteSocket clienteSocket = new ClienteSocket(serverSocket.accept());
                cliente.add(clienteSocket); 


                new Thread(() -> {
                    clientMessageLoop(clienteSocket);
                }).start();

            }
    }

    private void clientMessageLoop(ClienteSocket clienteSocket){
        String msg;
        try {
            while ((msg = clienteSocket.getMessage()) != null) {
                if ("sair".equalsIgnoreCase(msg))
                    return;
                System.out.println("Mensagem recebida do Usuario: " + clienteSocket.getRemoteSocketAddress() + ": " + msg);

                sendMsgToALL(ClienteSocket, msg);
            }
        } finally {
            {
                clienteSocket.close();
            }

        }
    }
    private void sendMsgToALL(ClienteSocket sender, String msg){
        Iterator<ClienteSocket> Iterator = cliente.iterator();
        while (Iterator.hasNext()) {
            ClienteSocket clienteSocket = Iterator.next();
            }
        }

    public static void main(String [] args) {
        try {
            Chat servidor = new Chat();
            servidor.start();
        } catch (IOException e) {
            System.out.println("Erro ao iniciar chat" + e.getMessage());
        }

        System.out.println("chat Finalizado");
    }

}
